// 0. Documentation
//    Purpose:          To develop a program in C that will leverage the IOs available on TI's Tiva C Series LaunchPad to 
//                      emulate the basic functionality of a pacemaker.   
//    Author:           Ricardo Morocz
//    Date:             07/14/2017
//    Acknowledgement:  Work based on the code developed by Ramesh Yerraballi & Jon Valvano as part of the UT Austin's 
//                      Embedded Systems online course lab 7 set-up
//    Notes:            - built-in connection: PF0 connected to negative logic momentary switch, SW2
//                      - built-in connection: PF1 connected to red LED
//                      - built-in connection: PF2 connected to blue LED
//                      - built-in connection: PF3 connected to green LED
//                      - built-in connection: PF4 connected to negative logic momentary switch, SW1
//                      - Color    LED(s) PortF
//                        dark     ---    0
//                        red      R--    0x02
//                        blue     --B    0x04
//                        green    -G-    0x08
//                        yellow   RG-    0x0A
//                        sky blue -GB    0x0C
//                        white    RGB    0x0E

//--------------------------------------------------------------------------------------------------------------------------
// 1. Pre-processor Directives
#include "TExaS.h"

#define GPIO_PORTF_DATA_R       (*((volatile unsigned long *)0x400253FC))
#define GPIO_PORTF_DIR_R        (*((volatile unsigned long *)0x40025400))
#define GPIO_PORTF_AFSEL_R      (*((volatile unsigned long *)0x40025420))
#define GPIO_PORTF_PUR_R        (*((volatile unsigned long *)0x40025510))
#define GPIO_PORTF_DEN_R        (*((volatile unsigned long *)0x4002551C))
#define GPIO_PORTF_LOCK_R       (*((volatile unsigned long *)0x40025520))
#define GPIO_PORTF_CR_R         (*((volatile unsigned long *)0x40025524))
#define GPIO_PORTF_AMSEL_R      (*((volatile unsigned long *)0x40025528))
#define GPIO_PORTF_PCTL_R       (*((volatile unsigned long *)0x4002552C))
#define SYSCTL_RCGC2_R          (*((volatile unsigned long *)0x400FE108))
		
//--------------------------------------------------------------------------------------------------------------------------
// 2. Global Declarations

//    Global Variables
unsigned long PF1; //Red LED in PF1 simulates the Ventricular Trigger (VT)
unsigned long PF3; //Green LED in PF2 is used as the Ready signal
unsigned long PF4; //SW1 in PF4 simulates the Atrial Sensor (AS)

//    Function Prototypes
void PortF_Init(void);
void Delay1ms(unsigned long msec);
void EnableInterrupts(void);  // Enable interrupts
void WaitForASLow(void);
void WaitForASHigh(void);
void SetVT(void);
void ClearVT(void);
void SetReady(void);
void ClearReady(void);

//--------------------------------------------------------------------------------------------------------------------------
// 3. Functions/Subroutines

int main(void){
  TExaS_Init(SW_PIN_PF40, LED_PIN_PF31,ScopeOn);  // activate grader and set system clock to 80 MHz
  PortF_Init();                                   // Init port PF4 PF3 PF1    
  EnableInterrupts();                             // enable interrupts for the grader  
	
  while(1){          
		SetReady();
		WaitForASLow();
		ClearReady();
		Delay1ms(10);
		WaitForASHigh();
		Delay1ms(250);
		SetVT();
		Delay1ms(250);
		ClearVT();
  }
}

// PortF_Init: Subroutine to initialize port F pins for input and output
// PF4 is input SW1 and PF3-1 is output LEDs
// Inputs: None
// Outputs: None
// Notes: ...
void PortF_Init(void){ volatile unsigned long delay;
  SYSCTL_RCGC2_R |= 0x00000020;      // 1) F clock
  delay = SYSCTL_RCGC2_R;            // delay to allow clock to stabilize     
  GPIO_PORTF_AMSEL_R &= 0x00;        // 2) disable analog function
  GPIO_PORTF_PCTL_R &= 0x00000000;   // 3) GPIO clear bit PCTL  
  GPIO_PORTF_DIR_R &= ~0x10;         // 4.1) PF4 input,
  GPIO_PORTF_DIR_R |= 0x0E;          // 4.2) PF3,2,1 output  
  GPIO_PORTF_AFSEL_R &= 0x00;        // 5) no alternate function
  GPIO_PORTF_PUR_R |= 0x10;          // 6) enable pullup resistor on PF4       
  GPIO_PORTF_DEN_R |= 0x1E;          // 7) enable digital pins PF4-PF1
}

// WaitForASLow: Subroutine reads AS input and waits for signal to be low
// If AS is already low, it returns right away
// If AS is currently high, it will wait until it to go low
// Inputs:  None
// Outputs: None
void WaitForASLow(void){
   do{
		 PF4=GPIO_PORTF_DATA_R&0x10;
	 } while (PF4 == 0x10);
}

// WaitForASHigh: Subroutine reads AS input and waits for signal to be high
// If AS is already high, it returns right away
// If AS is currently low, it will wait until it to go high
// Inputs:  None
// Outputs: None
void WaitForASHigh(void){
   do{
		 PF4=GPIO_PORTF_DATA_R&0x10;
	 } while (PF4 == 0x00);
}

// SetVT: Subroutine sets VT high
// Inputs:  None
// Outputs: None
// Notes:   friendly means it does not affect other bits in the port
void SetVT(void){
  GPIO_PORTF_DATA_R |= 0x02;
}

// ClearVT: Subroutine clears VT low
// Inputs:  None
// Outputs: None
// Notes:   friendly means it does not affect other bits in the port
void ClearVT(void){
  GPIO_PORTF_DATA_R &= ~0x02;
}

// SetReady: Subroutine sets Ready high
// Inputs:  None
// Outputs: None
// Notes:   friendly means it does not affect other bits in the port
void SetReady(void){
  GPIO_PORTF_DATA_R |= 0x08;
}

// ClearReady: Subroutine clears Ready low
// Inputs:  None
// Outputs: None
// Notes:   friendly means it does not affect other bits in the port
void ClearReady(void){
  GPIO_PORTF_DATA_R &= ~0x08;
}

// Delay1ms: Subroutine to delay in units of milliseconds
// Inputs:  Number of milliseconds to delay
// Outputs: None
// Notes:   assumes 80 MHz clock
void Delay1ms(unsigned long msec){
	unsigned long i = msec * 80000 / 6; // 100ms * 80MHz / 6 cycles per loop = 1333333
	while(i > 0){
      i = i - 1;
  }
}
